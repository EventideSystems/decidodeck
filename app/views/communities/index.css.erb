<% @communities.each do |community| %>
  .community-<%= community.id %> {
    color: <%= community.color %>;
    border-top-width : 1px;
    border-bottom-width : 1px;
    border-left-width : 1px;
    border-right-width : 1px;
    border-color: <%= community.color %>;
    background-color: oklch(from <%= community.color %> l c h / 0.1);
  }
<% end %>

<%#

Consider converting the JS below to Ruby and generate a contrast color. We can use the hsluv-ruby gem to convert the color to HSLuv
and adjust the lightness gem (link below) to determine lightness and ensure good contrast.

https://github.com/hsluv/hsluv-ruby

Alternatively, we can use the APCA algorithmto convert to check for contrast. The APCA algorithm is available in the apca-w3 package (link below).
https://github.com/Myndex/apca-w3/blob/c012257167d822f91bc417120bdb82e1b854b4a4/src/apca-w3.js

import { parse, format, converter } from 'culori';

function generateContrastColor(hexColor) {
  // Parse the hex color to oklch
  const oklchColor = parse(hexColor, 'hex');

  // Adjust the lightness component to ensure good contrast
  // For example, if the lightness is above 0.5, reduce it; if below, increase it
  const contrastLightness = oklchColor.l > 0.5 ? oklchColor.l - 0.5 : oklchColor.l + 0.5;

  // Create the contrast color in oklch
  const contrastColor = {
    mode: 'oklch',
    l: contrastLightness,
    c: oklchColor.c,
    h: oklchColor.h
  };

  // Convert the contrast color back to hex
  return format(contrastColor, 'hex');
}

// Example usage
const hexColor = '#3498db'; // Replace with community.color
const contrastColor = generateContrastColor(hexColor);
console.log(contrastColor);

%>
